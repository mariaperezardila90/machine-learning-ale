boring_function <- function(x) {
x
}
boring_function('My first function!')
boring_function <- function(x) {
x
}
submit()
submit()
x}
submit()
x}
submit()
x
submit()
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x)
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
submit()
boring_function <- function(x)
x
submit()
submit()
submit()
boring_function <- function(x)
submit()
unction(x) {
x
submit()
submit()
submit()
submit()
boring_function <- function(x) {
x
}boring_function <- function(x) {
submit()
Maria Alejandra
Maria Alejandra
swirl()
#x
submit()
#x
submit()
submit()
submit()
submit()
boring_function - function(x) { x
boring_function('My first function!')
boring_function('My first function!')
submit()
submit()
swirl()
swirl()
library(swirl)
swirl
packageVersion("swirl").
packageVersion("swirl")
library(swirl)
swirl()
#x
submit()
#x }
submit()
boring_function <- function(x)   #x }
submit()
submit()
submit()
test_func1()
library(swirl)
swirl()
test_func1()
submit()
submit()
boring_function <- function(x) { x submit()
submit()
# arg2 represent the arguments of your function. You can manipulate the arguments
# you specify within the function. After sourcing the function, you can use the
# function by typing:
#
# function_name(value1, value2)
#
# Below we will create a function called boring_function. This function takes
# the argument `x` as input, and returns the value of x without modifying it.
# Delete the pound sign in front of the x to make the function work! Be sure to
# save this script and type submit() in the console after you make your changes.
submit()
boring_function <- function(x) {x
submit()
library(swirl)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
boring_function <- function(x) {x
submit()
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
library(swirl)
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
boring_function <- function(x) {
+x
}
submit()
source("C:/Users/maria/OneDrive/Escritorio/R/Hopkins/datasciencecoursera/R_first_hop.R", echo=TRUE)
submit()
submit()
swirl()
submit()
boring_function <- function(x) {
+x
}
submit()
boring_function('My first function!')
boring_function("My fist function!")
boring_function('My first function!')
submit()
boring_function('My first function!')
boring_function <- function(x) {
#x
}
submit()
library(swirl)
swirl()
boring_function('My first function!')
boring_function()
fix(boring_function)
boring_function('My first function!')
boring_function()
fix(boring_function)
fix(boring_function)
boring_function('My first function!')
print(boring_function())
print(boring_function)
subset(boring_function)
fix(boring_function)
boring_function <- function(x) {
x
}
x}
boring_function <- function(x) { x }
boring_function('My first function!')
x}
boring_function <- function(x) {
x
}
submit()
boring_function('My first function!')
combined_df <- do.call("rbind", lapply(txt_files_df, as.data.frame))
pollutantmean <- function(directory, pollutant, id = 1:332) {
mydata <- list.files(path = "/Users/maria/OneDrive/Escritorio/R/Hopkins/datasciencecoursera/Spectdata/specdata
")[id]
readfiles <- lapply(mydata, read.csv)
combine <- do.call(rbind,readfiles)
mean(combine[,pollutant], na.rm = TRUE)
}
print(pollutantmean)
pollutantmean("specdata", "sulfate", 1:10)
print(R.version.string)
url = "https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip"
download.file(url, "urlFileData.zip")
unzip("urlFileData.zip", exdir = "data")
head(file.temp)
head(file.temp)
head(file.temp)
df.File <- read.csv(filename, head=TRUE, sep=",")
print(R.version.string)
url = "https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip"
download.file(url, "urlFileData.zip")
unzip("urlFileData.zip", exdir = "data")
pollutantmean <- function(path.files, pollutant, id = 0) {
list.filenames <- list.files(path.files, pattern="datacombined.csv")
list.values <- numeric()
if(length(id) == 1){
if(id == 0){
id = 332
}
}
for(i in c(id) ) {
filename <- paste(path.files, list.filenames[i], sep = "/")
df.File <- read.csv(filename, head=TRUE, sep=",")
if(pollutant == "sulfate"){
valores <- df.File$sulfate[!is.na(df.File$sulfate)]
}
else{
valores <- df.File$nitrate[!is.na(df.File$nitrate)]
}
list.values <- append(list.values, valores)
}
return(mean(list.values))
}
pollutantmean("specdata", "sulfate", 1:10)
print(R.version.string)
url = "https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip"
download.file(url, "urlFileData.zip")
unzip("urlFileData.zip", exdir = "data")
pollutantmean <- function(path.files, pollutant, id = 0) {
list.filenames <- list.files(path.files, pattern="datacombined.csv")
list.values <- numeric()
if(length(id) == 1){
if(id == 0){
id = 332
}
}
for(i in c(id) ) {
filename <- paste(path.files, list.filenames[i], sep = "/")
df.File <- read.csv(filename, head=TRUE, sep=",")
if(pollutant == "sulfate"){
valores <- df.File$sulfate[!is.na(df.File$sulfate)]
}
else{
valores <- df.File$nitrate[!is.na(df.File$nitrate)]
}
list.values <- append(list.values, valores)
}
return(mean(list.values))
}
pollutantmean("specdata", "sulfate", 1:10)
library(dplyr)
data_list <- lapply(file_list, read.csv)
merged_data <- bind_rows(data_list)
print(merged_data)
write.csv(merged_data, file = "merged_file.csv", row.names = FALSE)
write.csv(merged_data, file = "allcvscombined.csv", row.names = FALSE)
read.csv(allcvscombined.cvs)
read.csv(allcvscombined.cvs)
print(R.version.string)
library(dplyr)
folder_path <- "Users/maria/OneDrive/Escritorio/specdata"
file_list <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
data_list <- lapply(file_list, read.csv)
merged_data <- bind_rows(data_list)
print(merged_data)
write.csv(merged_data, file = "allcvscombined.csv", row.names = FALSE)
read.csv(allcvscombined.cvs)
print(R.version.string)
library(dplyr)
folder_path <- "Users/maria/OneDrive/Escritorio/specdata"
file_list <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
data_list <- lapply(file_list, read.csv)
merged_data <- bind_rows(data_list)
print(merged_data)
write.csv(merged_data, file = "merged_file.csv", row.names = FALSE)
if (!dir.exists(folder_path)) {
stop
}
print(head(merged_data))
library(dplyr)
folder_path <- "Users/maria/OneDrive/Escritorio/specdata"
file_list <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
data_list <- lapply(file_list, read.csv)
merged_data <- bind_rows(data_list)
print(merged_data)
write.csv(merged_data, file = "merged_file.csv", row.names = FALSE)
folder_path <- "C:\Users\maria\OneDrive\Escritorio\R\Hopkins\specdata\specdata"
print(R.version.string)
library(dplyr)
folder_path <- "C:/Users/maria/OneDrive/Escritorio/R/Hopkins/specdata/specdata"
file_list <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
data_list <- lapply(file_list, read.csv)
merged_data <- bind_rows(data_list)
print(merged_data)
write.csv(merged_data, file = "merged_file.csv", row.names = FALSE)
write.csv(merged_data, file = "allcvscombined.csv", row.names = FALSE)
list.values <- numeric()
pollutantmean(directory, "nitrate", 1:10)
load("~/.RData")
load("~/.RData")
library(swirl)
swirl
swirl()
2
1
0
2
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
?sapply
newsappy <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
range(flag_shapes)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lengh(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
2
2
0
0
exit
library(swirl)
swirl
swirl()
exit
0
0
0
library(swirl)
swirl
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
data(iris)
library(datasets)
data(iris)
library(datasets)
install.packages("datasets")
library(datasets)
library(datasets)
install.packages("datasets")
library(datasets)
hi
library(datasets)
install.packages("datasets")
library(datasets)
exit
0
0
exit
library(datasets)
install.packages("datasets")
library(datasets)
library(datasets)
install.packages("datasets")
library(datasets)
data(iris)
?iris
iris %>%
mean(Sepal.Length, virginica)
summary(sepal.lenght)
iris %>%
summary(Sepal.Length)
iris %>%
summary(mean, Sepal.Length)
summary(mean, Sepal.Length)
summary(mean, Sepal.Length)
library(datasets)
install.packages("datasets")
library(datasets)
data(iris)
summary(mean, Sepal.Length)
#or, more explicitly:
apply(iris[,-5], 2, function(x) {tapply(x, iris$Species, mean)})
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
force(mtcars)
# Return a list of the above functions
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() {
x
}
setInverse <- function(inverse) {
inv <<- inverse
}
getInverse <- function() {
inv
}
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() {
x
}
setInverse <- function(inverse) {
inv <<- inverse
}
getInverse <- function() {
inv
}
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if (!is.null(inv)) {
message
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
library(caret)
library(randomForest)
library(ggplot2)
# Load the data
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
train_data <- read.csv(train_url, na.strings=c("NA","","#DIV/0!"))
test_data <- read.csv(test_url, na.strings=c("NA","","#DIV/0!"))
# Data Cleaning: Remove near-zero variance variables and those with too many NAs
train_data <- train_data[, colSums(is.na(train_data)) == 0]
test_data <- test_data[, colSums(is.na(test_data)) == 0]
# Remove irrelevant columns (identifiers)
train_data <- train_data[, -c(1:7)]
test_data <- test_data[, -c(1:7)]
# Convert classe (target variable) into a factor
train_data$classe <- as.factor(train_data$classe)
# Split training data into train (75%) and validation (25%) sets
set.seed(123)
inTrain <- createDataPartition(train_data$classe, p = 0.75, list = FALSE)
training <- train_data[inTrain, ]
validation <- train_data[-inTrain, ]
# Train a Random Forest model
set.seed(123)
rf_model <- train(classe ~ ., data = training, method = "rf",
trControl = trainControl(method = "cv", number = 5))
# Model Summary
print(rf_model)
# Predictions on validation set
val_preds <- predict(rf_model, validation)
# Evaluate model performance
conf_matrix <- confusionMatrix(val_preds, validation$classe)
print(conf_matrix)
# Make predictions on the test set
final_predictions <- predict(rf_model, test_data)
# Print final predictions
print(final_predictions)
# Save predictions to a file for submission
write.csv(final_predictions, file = "final_predictions.csv", row.names = FALSE)
# Save predictions to a file for submission
write.csv(final_predictions, file = "final_predictions.csv", row.names = FALSE)
# Save predictions to a file for submission
write.csv(final_predictions, file = "final_predictions.csv", row.names = FALSE)
# Define the directory where you want to save the file
output_dir <- "C:/Users/maria/OneDrive/Escritorio/R/Hopkins/Practical machine learning"
# Save predictions to a file in the specified directory
write.csv(final_predictions, file = paste0(output_dir, "/final_predictions.csv"), row.names = FALSE)
getwd()
getwd()
setwd("C:/Users/maria/OneDrive/Escritorio/R/Hopkins/Practical machine learning")
list.files()
C:/Users/maria/OneDrive/Escritorio/R/Hopkins/Practical machine learning
C:/Users/maria/OneDrive/Escritorio/R/Hopkins/Practical machine learning
R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
C:/Users/maria/OneDrive/Escritorio/R/Hopkins/Practical machine learning
setwd("C:/Users/maria/OneDrive/Escritorio/R/Hopkins/Practical machine learning")
setwd("C:/Users/maria/OneDrive/Escritorio/R/Hopkins/Practical machine learning")
getwd()  # Confirm the working directory
list.files()  # Check if CSV files are there
